using System;
using System.Data;
using System.Web.UI;
using System.Web.UI.WebControls;
using Lumex.Project.BLL;
using Lumex.Tech;

namespace lmxIpos.UI.Vendor
{
    public partial class Update : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            try
            {
                msgbox.Visible = false;

                if (!IsPostBack)
                {
                    idLabel.Text = vendorIdForUpdateHiddenField.Value = LumexSessionManager.Get("VendorIdForUpdate").ToString().Trim();
                    LoadWarehouses();
                    //LoadSalesCenter();
                    GetVendorById(vendorIdForUpdateHiddenField.Value.Trim());

                    vendorNameTextBox.Focus();
                }
            }
            catch (Exception ex)
            {
                updateButton.Enabled = false;

                string message = ex.Message;
                if (ex.InnerException != null) { message += " --> " + ex.InnerException.Message; }
                MyAlertBox("ErrorAlert(\"" + ex.GetType() + "\", \"" + message + "\", \"\");");
            }
        }

        protected void MyAlertBox(string alertScript)
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "ServerControlScript", alertScript, true);
        }
        protected void LoadWarehouses()
        {
            WarehouseBLL warehouse = new WarehouseBLL();

            try
            {
                DataTable dt = warehouse.GetActiveWarehouseListByUser();

                warehouseDropDownList.DataSource = dt;
                warehouseDropDownList.DataValueField = "WarehouseId";
                warehouseDropDownList.DataTextField = "WarehouseName";
                warehouseDropDownList.DataBind();
                warehouseDropDownList.Items.Insert(0, "");
                //warehouseDropDownList.SelectedIndex = 0;
                //warehouseDropDownList.Items[0].Value = "A";
                warehouseDropDownList.SelectedValue = LumexSessionManager.Get("UserWareHouseId").ToString();

            }
            catch (Exception ex)
            {
                string message = ex.Message;
                if (ex.InnerException != null) { message += " --> " + ex.InnerException.Message; }
                MyAlertBox("ErrorAlert(\"" + ex.GetType() + "\", \"" + message + "\", \"\");");
            }
            finally
            {
                warehouse = null;
            }
        }
        //protected void LoadSalesCenter()
        //{
        //    SalesCenterBLL warehouse = new SalesCenterBLL();

        //    try
        //    {
        //        DataTable dt = warehouse.GetActiveSalesCenterListByUser();

        //        salescenterDropDownList.DataSource = dt;
        //        salescenterDropDownList.DataValueField = "SalesCenterId";
        //        salescenterDropDownList.DataTextField = "SalesCenterName";
        //        salescenterDropDownList.DataBind();
        //        salescenterDropDownList.Items.Insert(0, "For all Sales Center");
        //      //  salescenterDropDownList.SelectedIndex = 0;

        //        salescenterDropDownList.Items[0].Value = "A";

        //      // salescenterDropDownList.SelectedValue = LumexSessionManager.Get("UserSalesCenterId").ToString();


        //    }
        //    catch (Exception ex)
        //    {
        //        string message = ex.Message;
        //        if (ex.InnerException != null) { message += " --> " + ex.InnerException.Message; }
        //        MyAlertBox("ErrorAlert(\"" + ex.GetType() + "\", \"" + message + "\", \"\");");
        //    }
        //    finally
        //    {
        //        warehouse = null;
        //    }
        //}


        protected void GetVendorById(string vendorId)
        {
            VendorBLL vendor = new VendorBLL();

            try
            {
                DataTable dt = vendor.GetVendorById(vendorId);

                if (dt.Rows.Count > 0)
                {
                    vendorNameForUpdateHiddenField.Value = vendorNameTextBox.Text = dt.Rows[0]["VendorName"].ToString();
                    countryTextBox.Text = dt.Rows[0]["Country"].ToString();
                    cityTextBox.Text = dt.Rows[0]["City"].ToString();
                    //districtTextBox.Text = dt.Rows[0]["District"].ToString();
                    // postalCodeTextBox.Text = dt.Rows[0]["PostalCode"].ToString();
                    phoneTextBox.Text = dt.Rows[0]["Phone"].ToString();
                    // mobileTextBox.Text = dt.Rows[0]["Mobile"].ToString();
                    // faxTextBox.Text = dt.Rows[0]["Fax"].ToString();
                    txtbxOwnerName.Text = dt.Rows[0]["OwnerName"].ToString();
                    txtbxOwnerCell.Text = dt.Rows[0]["OwnerCell"].ToString();
                    txtbxDescription.Text = dt.Rows[0]["Description"].ToString();
                    txtbxContactPersonDesignation.Text = dt.Rows[0]["ContactDesignation"].ToString();
                    txtbxContactPersonAddress.Text = dt.Rows[0]["ContactAddress"].ToString();
                    txtbxContactPerson.Text = dt.Rows[0]["ContactPerson"].ToString();

                    ListItem listItem = new ListItem();
                    listItem = warehouseDropDownList.Items.FindByValue(dt.Rows[0]["WareHouse"].ToString());

                    if (listItem != null)
                    {
                        warehouseDropDownList.SelectedValue = dt.Rows[0]["WareHouse"].ToString();
                    }
                    else
                    {
                        warehouseDropDownList.Items.Insert(0, "Not Parmitted");
                        warehouseDropDownList.Items[0].Value = dt.Rows[0]["WareHouse"].ToString();
                        warehouseDropDownList.SelectedIndex = 0;
                        warehouseDropDownList.Enabled = false;
                        updateButton.Enabled = false;
                    }



                    emailTextBox.Text = dt.Rows[0]["Email"].ToString();
                    addressTextBox.Text = dt.Rows[0]["Address"].ToString();
                }
                else
                {
                    msgbox.Visible = true; msgTitleLabel.Text = "Vendor Data Not Found!!!"; msgDetailLabel.Text = "";
                    msgbox.Attributes.Add("class", "alert alert-warning");
                }
            }
            catch (Exception ex)
            {
                string message = ex.Message;
                if (ex.InnerException != null) { message += " --> " + ex.InnerException.Message; }
                MyAlertBox("ErrorAlert(\"" + ex.GetType() + "\", \"" + message + "\", \"\");");
            }
            finally
            {
                vendor = null;
            }
        }

        protected void updateButton_Click(object sender, EventArgs e)
        {
            VendorBLL vendor = new VendorBLL();

            try
            {
                if (vendorIdForUpdateHiddenField.Value.Trim() == "")
                {
                    msgbox.Visible = true; msgTitleLabel.Text = "Exception!!!"; msgDetailLabel.Text = "Vendor not found to update.";
                }
                else if (vendorNameTextBox.Text == "")
                {
                    msgbox.Visible = true; msgTitleLabel.Text = "Validation!!!"; msgDetailLabel.Text = "Vendor Name field is required.";
                }
                else if (addressTextBox.Text == "")
                {
                    msgbox.Visible = true; msgTitleLabel.Text = "Validation!!!"; msgDetailLabel.Text = "Address field is required.";
                }
                else
                {
                    vendor.VendorId = vendorIdForUpdateHiddenField.Value.Trim();
                    vendor.VendorName = vendorNameTextBox.Text.Trim();
                    vendor.Address = addressTextBox.Text.Trim();
                    vendor.Country = countryTextBox.Text.Trim();
                    vendor.City = cityTextBox.Text.Trim();
                    vendor.District = "";//districtTextBox.Text.Trim();
                    vendor.PostalCode = "";// postalCodeTextBox.Text.Trim();
                    vendor.Phone = phoneTextBox.Text.Trim();
                    vendor.Mobile = "";//mobileTextBox.Text.Trim();
                    vendor.Fax = "";//faxTextBox.Text.Trim();
                    vendor.Email = emailTextBox.Text.Trim();
                    vendor.salescenter = "";//salescenterDropDownList.SelectedValue;
                    vendor.WarehouseId = warehouseDropDownList.SelectedValue;
                    vendor.Description = txtbxDescription.Text.Trim();
                    vendor.OwnerName = txtbxOwnerName.Text.Trim();
                    vendor.OwnerCell = txtbxOwnerCell.Text.Trim();
                    vendor.ContactPerson = txtbxContactPerson.Text.Trim();
                    vendor.ContactPersonAddress = txtbxContactPersonAddress.Text.Trim();
                    vendor.ContactPersonDesignation = txtbxContactPersonDesignation.Text.Trim();

                    if (!vendor.CheckDuplicateVendor(vendorNameTextBox.Text.Trim(), warehouseDropDownList.SelectedValue, vendor.salescenter))
                    {
                        vendor.UpdateVendor();

                        vendorNameForUpdateHiddenField.Value = "";
                        vendorIdForUpdateHiddenField.Value = "";

                        string message = "Vendor <span class='actionTopic'>Updated</span> Successfully.";
                        MyAlertBox("var callbackOk = function () { MyOverlayStart(); window.location = \"/UI/Vendor/List.aspx\"; }; SuccessAlert(\"" + "Process Succeed" + "\", \"" + message + "\", callbackOk);");
                    }
                    else
                    {
                        if (vendorNameForUpdateHiddenField.Value == vendorNameTextBox.Text.Trim())
                        {
                            vendor.VendorName = "WithOut";
                            vendor.UpdateVendor();

                            vendorNameForUpdateHiddenField.Value = "";
                            vendorIdForUpdateHiddenField.Value = "";

                            string message = "Vendor <span class='actionTopic'>Updated</span> Successfully.";
                            MyAlertBox("var callbackOk = function () { MyOverlayStart(); window.location = \"/UI/Vendor/List.aspx\"; }; SuccessAlert(\"" + "Process Succeed" + "\", \"" + message + "\", callbackOk);");
                        }
                        else
                        {
                            string message = "This Vendor <span class='actionTopic'>already exist</span>, try another one.";
                            MyAlertBox("WarningAlert(\"" + "Data Duplicate" + "\", \"" + message + "\");");
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                string message = ex.Message;
                if (ex.InnerException != null) { message += " --> " + ex.InnerException.Message; }
                MyAlertBox("ErrorAlert(\"" + ex.GetType() + "\", \"" + message + "\", \"\");");
            }
            finally
            {
                vendor = null;
            }
        }

        protected void CancelButton_Click(object sender, EventArgs e)
        {
            Response.Redirect("/UI/Vendor/List.aspx", false);
        }
    }
}