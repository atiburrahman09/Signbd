using System;
using System.Data;
using System.Web.UI;
using System.Web.UI.WebControls;
using Lumex.Project.BLL;
using Lumex.Tech;

namespace lmxIpos.UI.ReceiveFromCustomer
{
    public partial class PaymentByCustomer : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            try
            {
                msgbox.Visible = false;

                if (!IsPostBack)
                {
                    LoadWarehouses();
                    LoadActiveCustomerList();
                    // LoadChartOfAccountsCashAndBankHeadList();

                    if (Session["forClientReceive"] != null)
                    {
                        string ClientId = (string)LumexSessionManager.Get("forClientReceive").ToString();

                        customerIdDropDownList.SelectedValue = ClientId;
                        GetCustomerReceivableList();
                        //if (ClientId != "" && ClientName != "")
                        //{
                        //    txtbxClientName.Text = ClientId + "[" + ClientName + "]";
                        //    GetClientInformation(ClientId);
                        //    btnSearch_Click(this, e);

                        //    LumexSessionManager.Remove("ClientId");
                        //    LumexSessionManager.Remove("ClientName");
                        //}

                    }
                    customerIdDropDownList.Focus();
                }

                if (receivableListGridView.Rows.Count > 0)
                {
                    receivableListGridView.UseAccessibleHeader = true;
                    receivableListGridView.HeaderRow.TableSection = TableRowSection.TableHeader;
                }
            }
            catch (Exception ex)
            {
                string message = ex.Message;
                if (ex.InnerException != null) { message += " --> " + ex.InnerException.Message; }
                MyAlertBox("ErrorAlert(\"" + ex.GetType() + "\", \"" + message + "\", \"\");");
            }
        }

        protected void MyAlertBox(string alertScript)
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "ServerControlScript", alertScript, true);
        }
        protected void LoadWarehouses()
        {
            WarehouseBLL warehouse = new WarehouseBLL();

            try
            {
                DataTable dt = warehouse.GetActiveWarehouseListByUser();
                
                ddlSelectWareHouseOrSalesCenter.DataSource = dt;
                ddlSelectWareHouseOrSalesCenter.DataValueField = "WarehouseId";
                ddlSelectWareHouseOrSalesCenter.DataTextField = "WarehouseName";
                ddlSelectWareHouseOrSalesCenter.DataBind();
                ddlSelectWareHouseOrSalesCenter.Items.Insert(0, "Select Please");
                ddlSelectWareHouseOrSalesCenter.SelectedIndex = 0;
                ddlSelectWareHouseOrSalesCenter.SelectedValue = LumexSessionManager.Get("UserWareHouseId").ToString();
               // GetAvailableProductListBySalesCenter();



            }
            catch (Exception ex)
            {
                string message = ex.Message;
                if (ex.InnerException != null) { message += " --> " + ex.InnerException.Message; }
                MyAlertBox("ErrorAlert(\"" + ex.GetType() + "\", \"" + message + "\", \"\");");
            }
            finally
            {
                warehouse = null;
            }
        }
        protected void ddlSelectWareHouseOrSalesCenter_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                LoadActiveCustomerList();
            }
            catch (Exception ex)
            {
                string message = ex.Message;
                if (ex.InnerException != null) { message += " --> " + ex.InnerException.Message; }
                MyAlertBox("ErrorAlert(\"" + ex.GetType() + "\", \"" + message + "\", \"\");");
            }
        }
        protected void LoadActiveCustomerList()
        {
            CustomerBLL customer = new CustomerBLL();


            try
            {
                customer.WarehouseId = ddlSelectWareHouseOrSalesCenter.SelectedValue;
                DataTable dt = customer.GetActiveCustomerListByWHId();
                if (dt.Rows.Count > 0)
                {
                    customerIdDropDownList.DataSource = dt;
                    customerIdDropDownList.DataValueField = "CustomerId";
                    customerIdDropDownList.DataTextField = "CustomerIdName";
                    customerIdDropDownList.DataBind();
                    customerIdDropDownList.Items.Insert(0, "");
                    customerIdDropDownList.SelectedIndex = 0;
                }
                else
                {
                    customerIdDropDownList.DataSource = dt;
                    customerIdDropDownList.DataBind();
                    msgbox.Visible = true;
                    msgTitleLabel.Text = "Data Not Found";
                }
            }
            catch (Exception ex)
            {
                msgbox.Visible = true; msgTitleLabel.Text = "Exception!!!"; msgDetailLabel.Text = ex.Message;
            }
            finally
            {
                customer = null;
            }
        }

        protected void GetCustomerReceivableList()
        {
            ReceivePaymentBLL receivePayment = new ReceivePaymentBLL();

            try
            {
                if (customerIdDropDownList.SelectedValue.Trim() == "")
                {
                    msgbox.Visible = true; msgTitleLabel.Text = "Validation!!!"; msgDetailLabel.Text = "Customer ID field is required.";
                }
                else
                {
                    DataTable dt = receivePayment.GetCustomerReceivableList(customerIdDropDownList.SelectedValue);

                    receivableListGridView.DataSource = dt;
                    receivableListGridView.DataBind();

                    if (receivableListGridView.Rows.Count > 0)
                    {
                        receivableListGridView.UseAccessibleHeader = true;
                        receivableListGridView.HeaderRow.TableSection = TableRowSection.TableHeader;

                        decimal currentPayable = 0;
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            currentPayable += decimal.Parse(dt.Rows[i]["Due"].ToString());
                        }

                        currentReceivableLabel.Text = currentPayable.ToString();

                        amountTextBox.Focus();
                    }
                    else
                    {
                        msgbox.Visible = true; msgTitleLabel.Text = "Customer Receivable List Data Not Found!!!"; msgDetailLabel.Text = "";
                        msgbox.Attributes.Add("class", "alert alert-info");
                        currentReceivableLabel.Text = "0.00";
                    }
                }
            }
            catch (Exception ex)
            {
                string message = ex.Message;
                if (ex.InnerException != null) { message += " --> " + ex.InnerException.Message; }
                MyAlertBox("ErrorAlert(\"" + ex.GetType() + "\", \"" + message + "\", \"\");");
            }
            finally
            {
                receivePayment = null;
                MyAlertBox("MyOverlayStop();");
            }
        }

        protected void receivableListButton_Click(object sender, EventArgs e)
        {
            GetCustomerReceivableList();
        }

        //protected bool CheckAddedProduct(string productBarcodeIdName)
        //{
        //    bool status = false;

        //    try
        //    {
        //        for (int i = 0; i < selectedProductListGridView.Rows.Count; i++)
        //        {
        //            if (selectedProductListGridView.Rows[i].Cells[0].Text.ToString() == productBarcodeIdName || selectedProductListGridView.Rows[i].Cells[1].Text.ToString() == productBarcodeIdName)
        //            {
        //                //TextBox ratePerUnitTextBox = (TextBox)selectedProductListGridView.Rows[i].FindControl("ratePerUnitTextBox");

        //                //TextBox orderQuantityTextBox = (TextBox)selectedProductListGridView.Rows[i].FindControl("orderQuantityTextBox");
        //                //orderQuantityTextBox.Text = (int.Parse(orderQuantityTextBox.Text)).ToString();

        //                //TextBox amountTextBox = (TextBox)selectedProductListGridView.Rows[i].FindControl("amountTextBox");
        //                //amountTextBox.Text = (int.Parse(orderQuantityTextBox.Text) * decimal.Parse(ratePerUnitTextBox.Text)).ToString("0.00");
        //                //Label vat = (Label)selectedProductListGridView.Rows[i].FindControl("lblVatparcentage");

        //                //amountTextBox.Text = (decimal.Parse(amountTextBox.Text) + (decimal.Parse(amountTextBox.Text) * decimal.Parse(vat.Text)) / 100).ToString("0.00");

        //                //Old
        //                //TextBox stockTextBox = (TextBox)selectedProductListGridView.Rows[i].FindControl("stockTextBox");

        //                //TextBox totalUnitTextBox = (TextBox)selectedProductListGridView.Rows[i].FindControl("totalUnitTextBox");
        //                //totalUnitTextBox.Text = (decimal.Parse(orderQuantityTextBox.Text)) * (decimal.Parse(selectedProductListGridView.Rows[i].FindControl("Unit").ToString(; ;
        //                //totalUnitTextBox.Text = (decimal.Parse(orderQuantityTextBox.Text) * decimal.Parse(selectedProductListGridView.Rows[i].FindControl("Unit").ToString())).ToString("0.00");

        //                status = false; // to add duplicate product
        //                break;
        //            }
        //        }

        //        //CalculateTotalAmount();
        //        //  CalculateOthersAmount();
        //    }
        //    catch (Exception ex)
        //    {
        //        string message = ex.Message;
        //        if (ex.InnerException != null) { message += " --> " + ex.InnerException.Message; }
        //        MyAlertBox("ErrorAlert(\"" + ex.GetType() + "\", \"" + message + "\", \"\");");
        //    }

        //    return status;
        //}

        protected void saveButton_Click(object sender, EventArgs e)
        {
            ReceivePaymentBLL receivePayment = new ReceivePaymentBLL();
            DataRow dr = null;
            DataTable dt=new DataTable();
            dt.Columns.Add(new DataColumn("RecordDate"));
            dt.Columns.Add(new DataColumn("RecordId"));
            dt.Columns.Add(new DataColumn("SalesCenterName"));
            dt.Columns.Add(new DataColumn("TotalAmount"));
            dt.Columns.Add(new DataColumn("DiscountAmount"));
            dt.Columns.Add(new DataColumn("TotalVATAmount"));
            dt.Columns.Add(new DataColumn("TotalReceivable"));
            dt.Columns.Add(new DataColumn("ReceivedAmount"));
            dt.Columns.Add(new DataColumn("Due"));
         


            try
            {
                if (decimal.Parse(currentReceivableLabel.Text) > 0)
                {
                    if (decimal.Parse(currentReceivableLabel.Text) >= decimal.Parse(amountTextBox.Text.Trim()))
                    {
                        receivePayment.AccountId = accountHeadDropDownList.SelectedValue.Trim();
                        receivePayment.CustomerId = customerIdDropDownList.SelectedValue.Trim();
                        receivePayment.CashCheque = paymentModeDropDownList.SelectedValue.Trim();
                        receivePayment.CurrentReceivable = currentReceivableLabel.Text;
                        receivePayment.Amount = amountTextBox.Text.Trim();
                        receivePayment.Bank = bankDropDownList.Text;
                        receivePayment.BankBrach = bankBranchTextBox.Text;
                        receivePayment.ChequeNo = chequeNumberTextBox.Text;
                        receivePayment.ChequeDate = chequeDateTextBox.Text;

                        for (int i = 0; i < receivableListGridView.Rows.Count; i++)
                        {
                            CheckBox chkbx = (CheckBox)receivableListGridView.Rows[i].FindControl("selectCheckBox");

                            if (chkbx.Checked)
                            {
                                dr = dt.NewRow();

                                // dr["Barcode"] = productListGridView.Rows[i].Cells[0].Text.ToString();
                                dr["RecordDate"] = receivableListGridView.Rows[i].Cells[0].Text.ToString();
                                dr["RecordId"] = receivableListGridView.Rows[i].Cells[1].Text.ToString();
                                dr["SalesCenterName"] = receivableListGridView.Rows[i].Cells[2].Text.ToString();
                                dr["TotalAmount"] = receivableListGridView.Rows[i].Cells[3].Text.ToString();
                                dr["DiscountAmount"] = receivableListGridView.Rows[i].Cells[4].Text.ToString();
                                dr["TotalVATAmount"] = receivableListGridView.Rows[i].Cells[5].Text.ToString();
                                dr["TotalReceivable"] = receivableListGridView.Rows[i].Cells[6].Text.ToString();
                                dr["ReceivedAmount"] = receivableListGridView.Rows[i].Cells[7].Text.ToString();
                                dr["Due"] = receivableListGridView.Rows[i].Cells[7].Text.ToString();
                               

                                dt.Rows.Add(dr);
                            }
                        }

                        receivePayment.SaveCustomerPayment(ddlSelectWareHouseOrSalesCenter.SelectedValue,dt);

                        initializeFileds();

                        string message = "Customer Payment <span class='actionTopic'>Saved</span> Successfully.";
                        MyAlertBox("SuccessAlert(\"" + "Process Succeed" + "\", \"" + message + "\", \"\");");

                        GetCustomerReceivableList();

                        // MyAlertBox("alert(\"Saved Successfully.\");");
                        //    string message = "Product's <span class='actionTopic'>Sales Order</span> Successfully with Sale ID: <span class='actionTopic'>" +
                        //        + "</span>.";
                        //    MyAlertBox("var callbackOk = function () { MyOverlayStart(); window.location = \"/UI/SalesOrder/SalesOrderList.aspx\"; }; SuccessAlert(\"" +
                        //        "Process Succeed" + "\", \"" + message + "\", callbackOk);");
                    }
                    else
                    {
                        msgbox.Visible = true; msgTitleLabel.Text = "Exception!!!"; msgDetailLabel.Text = "Amount must be equal or less of Current Receivable Amount.";
                    }
                }
                else
                {
                    msgbox.Visible = true; msgTitleLabel.Text = "Exception!!!"; msgDetailLabel.Text = "No Receivable to Payment.";
                }
            }
            catch (Exception ex)
            {
                string message = ex.Message;
                if (ex.InnerException != null) { message += " --> " + ex.InnerException.Message; }
                MyAlertBox("ErrorAlert(\"" + ex.GetType() + "\", \"" + message + "\", \"\");");
            }

        }

        protected void initializeFileds()
        {
            amountTextBox.Text = "0.00";
            paymentModeDropDownList.SelectedIndex = 0;
            accountHeadDropDownList.SelectedIndex = 0;
            chequeNumberTextBox.Text = "";
            chequeDateTextBox.Text = "";
            bankDropDownList.Text = "";
            bankBranchTextBox.Text = "";
        }

        protected void paymentModeDropDownList_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                accountHeadDropDownList.Items.Clear();
                ChartOfAccountBLL chartOfAccount = new ChartOfAccountBLL();
                if (paymentModeDropDownList.SelectedItem.Text == "Cash")
                {
                    DataTable dt = chartOfAccount.GetActiveAndPostedChartOfAccountsCashHeadList();

                    accountHeadDropDownList.DataSource = dt;
                    accountHeadDropDownList.DataValueField = "AccountId";
                    accountHeadDropDownList.DataTextField = "AccountHead";
                    accountHeadDropDownList.DataBind();
                    accountHeadDropDownList.Items.Insert(0, "");
                    accountHeadDropDownList.SelectedIndex = 0;

                }
                else if (paymentModeDropDownList.SelectedItem.Text == "Cheque")
                {
                    DataTable dt = chartOfAccount.GetActiveAndPostedChartOfAccountsBankHeadList();
                    accountHeadDropDownList.DataSource = dt;
                    accountHeadDropDownList.DataValueField = "AccountId";
                    accountHeadDropDownList.DataTextField = "AccountHead";
                    accountHeadDropDownList.DataBind();
                    accountHeadDropDownList.Items.Insert(0, "");
                    accountHeadDropDownList.SelectedIndex = 0;
                }
            }
            catch (Exception)
            {

                throw;
            }
        }

        protected void customerIdDropDownList_SelectedIndexChanged(object sender, EventArgs e)
        {
            GetCustomerReceivableList();
        }
    }
}